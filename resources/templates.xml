<?xml version="1.0" encoding="UTF-8"?>
<templates>
    <class>
        <template regexp="^.*(public|protected|private)*.+interface\s+\w+.*">
/**\n
 * The interface $name.\n
 */
        </template>
        <template regexp="^.*(public|protected|private)*.+enum\s+\w+.*">
/**\n
 * The enum $name.\n
 */
        </template>
        <template regexp="^.*(public|protected|private)*.+class\s+\w+.*">
/**\n
 * The type $name.\n
 */
        </template>
        <template regexp=".+">
/**\n
 * The type $name.\n
 */
        </template>
    </class>

    <field>
        <template regexp="^.*(public|protected|private)*.+static.*(\w\s\w)+.+">
/**\n
 * The constant $element.getName().\n
 */
        </template>
        <template regexp="^.*(public|protected|private)*.*(\w\s\w)+.+">
/**\n
 * The $name.\n
 */
        </template>
        <template regexp=".+">
/**\n
 * The $name.\n
 */
        </template>
    </field>

    <method>
        <template regexp="^.*(public|protected|private)*\s*.*(\w(\s*&lt;.+&gt;)*)+\s+get\w+\s*\(.*\).+">
/**\n
 * Getter for property $fieldName.\n
 * @return the value of $fieldName.\n
 */
        </template>
        <template regexp="^.*(public|protected|private)*\s*.*(void|\w(\s*&lt;.+&gt;)*)+\s+set\w+\s*\(.*\).+">
/**\n
 * Setter for property $fieldName.\n
 * @param $fieldName the new value.\n
 */
        </template>
        <template regexp="^.*((public\s+static)|(static\s+public))\s+void\s+main\s*\(\s*String\s*(\[\s*\]|\.\.\.)\s+\w+\s*\).+">
/**\n
 * The entry point of application.\n
     * @param $element.parameterList.parameters[0].name the input arguments\n

     #if(!$element.throwsList.referenceElements.isEmpty())
         *\n
     #end
     #foreach($exception in $element.throwsList.referenceElements)
         * @throws $exception.referenceName the $exceptionNames[$exception.referenceName]\n
     #end

 */
        </template>
        <template regexp=".+">
/**\n
 * $name#if($partName.isEmpty()) $return#end.\n

     #foreach($parameter in $element.parameterList.parameters)
         * @param $parameter.name the $paramNames[$parameter.name]\n
     #end

     #if($isNotVoid)
         * @return the $return\n
     #end

     #if(!$element.throwsList.referenceElements.isEmpty())
     #end
     #foreach($exception in $element.throwsList.referenceElements)
         * @throws $exception.referenceName the $exceptionNames[$exception.referenceName]\n
     #end

 */
        </template>
    </method>

    <constructor>
        <template regexp=".+">
/**\n
 * Instantiates a new $name.\n

     #foreach($parameter in $element.parameterList.parameters)
         * @param $parameter.name the $paramNames[$parameter.name]\n
     #end

     #foreach($exception in $element.throwsList.referenceElements)
         * @throws $exception.referenceName the $exceptionNames[$exception.referenceName]\n
     #end

 */
        </template>
    </constructor>

</templates>
